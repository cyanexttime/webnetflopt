name: Laravel CI
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  laravel-tests:
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:24.0.5
        options: --privileged
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./docker
          file: ./docker/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/laravel-app:latest
      
      # Debug step to check directory structure
      - name: Create application directory if needed
        run: mkdir -p ./application

      - name: Start Docker Compose
        run: docker compose up -d
      
      # Debug step
      - name: Check Docker Compose status
        run: docker compose ps
      
      # Debug step
      - name: Check PHP container directories
        run: docker compose exec -T php ls -la /
        
      - name: Wait for MySQL to be ready
        run: |
          echo "Waiting for MySQL to be ready..."
          for i in {30..0}; do
            if docker exec db mysqladmin ping -h"localhost" -u"root" -p"123456789" --silent; then
              echo "MySQL is ready!"
              break
            fi
            echo "Waiting for database..."
            sleep 2
          done
      
      # Create application directory structure
      - name: Create Laravel directory structure
        run: |
          docker compose exec -T php sudo mkdir -p /application
          docker compose exec -T php sudo chown -R appuser:appgroup /application
          docker compose exec -T php sudo chmod -R 755 /application
      
      # Cache Composer dependencies
      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
      
      # Copy application code to container
      - name: Copy application code to container
        run: |
          docker cp ./ php:/application/
          docker compose exec -T php sudo chown -R appuser:appgroup /application
      
      # Fix Git permissions for CI
      - name: Fix Git permissions
        run: docker compose exec -T php sudo git config --global --add safe.directory /application
      
      # Create and set permissions for vendor directory
      - name: Set vendor directory permissions
        run: |
          docker compose exec -T php bash -c "sudo mkdir -p /application/vendor"
          docker compose exec -T php bash -c "sudo chmod -R 777 /application/vendor"
      
      # Install Composer dependencies
      - name: Install Composer dependencies
        run: docker compose exec -T php composer install --no-interaction --prefer-dist --optimize-autoloader
      
      # Set proper permissions for Laravel storage and cache
      - name: Set Laravel directory permissions
        run: |
          docker compose exec -T php bash -c "sudo mkdir -p /application/storage/framework/{sessions,views,cache}"
          docker compose exec -T php bash -c "sudo mkdir -p /application/bootstrap/cache"
          docker compose exec -T php bash -c "sudo chmod -R 777 /application/storage /application/bootstrap/cache"
      
      # Laravel setup and testing
      - name: Set application key
        run: docker compose exec -T php php artisan key:generate
      
      - name: Run migrations
        run: docker compose exec -T php php artisan migrate --force
      
      - name: Check if UserFactory exists
        run: docker compose exec -T php ls -la /application/database/factories

      - name: Run Laravel tests
        run: docker compose exec -T php php artisan test
      
      # Cleanup
      - name: Shut down Docker Compose
        if: always()
        run: docker compose down
